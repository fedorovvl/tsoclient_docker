#!/usr/bin/python3
import getpass, os, re, subprocess
from urllib import request, parse
import http.cookiejar
import hashlib, base64, json
import dateutil.parser

cookiejar = http.cookiejar.CookieJar()
cookieproc = request.HTTPCookieProcessor(cookiejar)
opener = request.build_opener(cookieproc)
request.install_opener(opener)

class tso:
  def __init__(self):
    self.user = os.getenv('USERNAME', None)
    self.passwd = os.getenv('PASSWORD', None)
    self.region = os.getenv('REGION', None)
    self.lang = os.getenv('GAMELANG', None)
    self.valid_lang = ["de-de","en-us","en-uk","fr-fr","ru-ru","pl-pl","es-es","nl-nl","cz-cz","pt-br","it-it","el-gr","ro-ro"]
    self.ubiData = None
    self.uplayData = None
    self.tsoUrl = None
    self.default_headers={
      "User-Agent": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.12 (KHTML, like Gecko) Chrome/9.0.570.0 Safari/534.12",
      "Referer": "http://game-cdn.thesettlersonline.net/prestaging/PS5724/SWMMO/debug/SWMMO.swf"
    }
    self.valid_region = {
      "de": { "domain": "https://www.diesiedleronline.de", "uplay": "/de/api/user/uplay", "main": "/de/startseite", "play": "/de/spielen" },
      "us": { "domain": "https://www.thesettlersonline.net", "uplay": "/en/api/user/uplay", "main": "/en/homepage", "play": "/en/play" },
      "en": { "domain": "https://www.thesettlersonline.com", "uplay": "/en/api/user/uplay", "main": "/en/homepage", "play": "/en/play" },
      "fr": { "domain": "https://www.thesettlersonline.fr", "uplay": "/fr/api/user/uplay", "main": "/fr/page-de-d%C3%A9marrage", "play": "/fr/jouer" },
      "ru": { "domain": "https://www.thesettlersonline.ru", "uplay": "/ru/api/user/uplay", "main": "/ru/%D0%B3%D0%BB%D0%B0%D0%B2%D0%BD%D0%B0%D1%8F-%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B8%D1%86%D0%B0", "play": "/ru/play" },
      "pl": { "domain": "https://www.thesettlersonline.pl", "uplay": "/pl/api/user/uplay", "main": "/pl/strona-g%C5%82%C3%B3wna", "play": "/pl/graj" },
      "es": { "domain": "https://www.thesettlersonline.es", "uplay": "/es/api/user/uplay", "main": "/es/p%C3%A1gina-de-inicio", "play": "/es/jugar" },
      "nl": { "domain": "https://www.thesettlersonline.nl", "uplay": "/nl/api/user/uplay", "main": "/nl/homepage", "play": "/nl/play" },
      "cz": { "domain": "https://www.thesettlersonline.cz", "uplay": "/cz/api/user/uplay", "main": "/cs/domovsk%C3%A1-str%C3%A1nka", "play": "/cs/play" },
      "pt": { "domain": "https://www.thesettlersonline.com.br", "uplay": "/pt/api/user/uplay", "main": "/pt/p%C3%A1gina-inicial", "play": "/pt/jogar" },
      "it": { "domain": "https://www.thesettlersonline.it", "uplay": "/it/api/user/uplay", "main": "/it/homepage", "play": "/it/gioca" },
      "el": { "domain": "https://www.thesettlersonline.gr", "uplay": "/el/api/user/uplay", "main": "/el/%CE%B1%CF%81%CF%87%CE%B9%CE%BA%CE%AE-%CF%83%CE%B5%CE%BB%CE%AF%CE%B4%CE%B1", "play": "/el/play" },
      "ro": { "domain": "https://www.thesettlersonline.ro", "uplay": "/ro/api/user/uplay", "main": "/ro/pagina-de-start", "play": "/ro/play" }
    }
    self.form_login()
    if self.lang != None:
      if not self.lang in self.valid_lang:
        print("Not valid client lang.. valid is %s" % ', '.join(self.valid_lang))
        exit()
    if not self.region in self.valid_region:
      print("Not valid region.. valid is %s" % ', '.join(self.valid_region.keys()))
      exit()
    req = request.Request('https://sirris.tsomaps.com/client.swf.sum')
    with request.urlopen(req) as response:
      self.shasum = response.read().decode('utf-8')
    self.check_swf()
    self.login()

  def get_login(self):
    self.user = input("Username: ")
    if not self.user:
      return self.get_login()

  def get_region(self, choose=False):
    if choose:
      print("Choose region:")
      for idx, val in enumerate(self.valid_region.keys()):
        print("  {}. {}".format(idx, val))
    else:
      print("You doing it wrong.. try again")
    region = input("Region: ")
    if not region.isdigit():
      return self.get_region()
    if not 0 <= int(region) < len(self.valid_region):
      return self.get_region()
    self.region = list(self.valid_region.keys())[int(region)]

  def get_pass(self):
    self.passwd = getpass.getpass('Password: ')
    if not self.passwd:
        return self.get_pass()

  def form_login(self):
    if not self.user:
      self.get_login()
    if not self.passwd:
      self.get_pass()
    if not self.region:
      self.get_region(True)

  def sha1sum(self, filename, bufsize=128 * 1024):
    h = hashlib.sha1()
    buffer = bytearray(bufsize)
    buffer_view = memoryview(buffer)
    with open(filename, 'rb', buffering=0) as f:
        while True:
            n = f.readinto(buffer_view)
            if not n:
                break
            h.update(buffer_view[:n])
    return h.hexdigest()

  def check_swf(self):
    sha1 = self.sha1sum("/tso/share/client.swf")
    if sha1 != self.shasum:
      print("You have image with old swf file. Please pull new image")
      exit()

  def get_response(self, req):
    with request.urlopen(req) as response:
      if response.getcode() != 200:
        print("Login failed")
        return False
      data = response.read().decode('utf-8')
    return data

  def get_req_url(self, type):
    return "{}{}".format(self.valid_region[self.region]["domain"], self.valid_region[self.region][type])

  def stage1(self):
    print("Do ubisoft login")
    auth = base64.b64encode("{}:{}".format(self.user, self.passwd).encode())
    headers={
      "Authorization": "Basic %s" % auth.decode(),
      "Ubi-AppId": "39164658-8187-4bf4-b46c-375f68356e3b",
      "Content-Type": "application/json",
      "Ubi-RequestedPlatformType": "uplay",
      "GenomeId": "978da00d-2533-4af4-a550-3ba09289084e"
    }
    headers.update(self.default_headers)
    req = request.Request('https://public-ubiservices.ubi.com/v3/profiles/sessions', data=json.dumps({"rememberMe":True}).encode('utf8'), method="POST", headers=headers)
    data = self.get_response(req)
    if data != False:
      self.ubiData = json.loads(data)
      if self.ubiData["sessionKey"] != None:
        return True
    return False

  def stage2(self):
    print("Do uplay login")
    expiration = dateutil.parser.isoparse(self.ubiData["expiration"])
    data = parse.urlencode({
      "id": self.ubiData["userId"],
      "ticket": self.ubiData["ticket"],
      "expiration": int(expiration.strftime("%s")) + 14400,
      "undefined": self.ubiData["sessionId"],
      "activated": "true"
    }).encode()
    req = request.Request(self.get_req_url("uplay"), data=data, headers=self.default_headers, method="POST")
    data = self.get_response(req)
    if data != False:
      self.uplayData = json.loads(data)
      if self.uplayData["status"] == "OKAY":
        return True
      else:
        print("Login failed %s" % self.uplayData["data"]["text"])
    else:
      print(data)
    return False

  def stage3(self):
    print("Do play page")
    req = request.Request(self.get_req_url("play"), data=parse.urlencode({"start": 1}).encode(), headers=self.default_headers, method="POST")
    data = self.get_response(req)
    if data != False:
      if data.find("thisProgram") == -1:
        print("Can't find start params")
        return False
      return self.stage4(data)
    return False

  def stage4(self, data):
    if not re.search('thisProgram: "(.*)"', data):
      print("Fail parse tso url")
      return False
    m = re.search('thisProgram: "(.*)"', data)
    urlParams = parse.parse_qs(m.group(1))
    if self.lang != None:
      urlParams["lang"] = self.lang
    urlParams["bb"] = urlParams["bb"][0].replace('https', 'http')
    urlParams["baseUri"] = self.valid_region[self.region]["domain"]
    self.tsoUrl = "tso://{}".format(parse.urlencode(urlParams, doseq=True))
    return True

  def login(self):
    if self.stage1() == False:
      return None
    if self.stage2() == False:
      return None
    if self.stage3() == False:
      return None
    print("Seems all ok. Run client now")
    subprocess.call(["/tso/bin/TSOClient", self.tsoUrl])

tso = tso()
